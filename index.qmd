---
title: "Turnaround Dates"
format: html
execute:
  echo: false
  warning: false
---

```{r}
#| label: load-packages
library(rvest)
library(httr2)
library(tibble)
library(dplyr)
library(purrr)
library(knitr)
library(lubridate)
library(bizdays)

devtools::load_all()
```


```{r}
#| label: get-current-datetime
CURRENT_DATETIME <- lubridate::now(tzone = "Pacific/Auckland")
```

```{r}
#| label: access-nz-holidays-api
# NZ Holidays API key comes from system environment:
#  - Local development: .Renviron
#  - Production: github secret
nz_holidays_api_key <- Sys.getenv("NZ_HOLIDAYS_API_KEY")

# Call NZ Holidays API
holidays_df <- get_nz_holidays_from_year(
  year = lubridate::year(CURRENT_DATETIME),
  api_key = nz_holidays_api_key
)

# Select only National holidays and Auckland-specific holidays
holiday_dates_df <- holidays_df |>
  dplyr::filter(
    (stringr::str_detect(HolidayName, "Auckland")) |
      (Type == "National")
  )
```

```{r}
#| label: create-bizdays-calendar
# Set up 'business calendar' for 'work day' calculations.
# This is used to account for weekends and public holidays when calculating due dates.
# Need to manually specify start and end dates because create.calendar() defaults to setting start.date to the min(holidays). 
bawb_biz_calendar <- bizdays::create.calendar(
  "bawb_calendar",
  weekdays = c("saturday", "sunday"),
  holidays = holiday_dates_df$ObservedDate,
  start.date = lubridate::ymd("1970-01-01"),
  end.date = lubridate::ymd("2071-01-01"),
)
```

```{r}
#| label: scrape-turnaround-time-webpage
film_turnaround_df <- get_turnaround_times_df(get_table = "film")
```

```{r}
c41_df <- film_turnaround_df |>
  dplyr::filter(Service == "C-41") |>
  parse_working_days_to_numeric() |>
  parse_digits_to_dates()

bw_df <- film_turnaround_df |>
  dplyr::filter(Service == "B&W") |>
  parse_working_days_to_numeric() |>
  parse_digits_to_dates()

e6_df <- film_turnaround_df |>
  dplyr::filter(Service == "E-6") |> 
  parse_weekdays_to_date()

ecn2_df <- film_turnaround_df |>
  dplyr::filter(Service == "ECN-2") |>
  parse_working_days_to_numeric() |>
  parse_digits_to_dates()

alt_df <- film_turnaround_df |>
  dplyr::filter(stringr::str_detect(Service, "^ALT Format.*")) |>
  parse_working_days_to_numeric() |>
  parse_digits_to_dates()


turaround_dates_df <- dplyr::bind_rows(
  c41_df,
  bw_df,
  e6_df,
  ecn2_df,
  alt_df
)
```


```{r}
turaround_dates_df |>
  # Format dates into day-month-year
  dplyr::mutate(across(where(is.Date), ~ format(.x, "%d-%m-%Y"))) |>
  knitr::kable()
```

_As of **`r format(CURRENT_DATETIME, "%A %d %B %Y")`** at `r format(CURRENT_DATETIME, "%H:%M%p")`_

-------

#### Website Turnaround Times
```{r}
#| label: display-website-turnaround-days

film_turnaround_df |>
  knitr::kable()
```

[Source](https://theblackandwhitebox.co.nz/turn-around-times/)


#### Upcoming Public Holidays
```{r}
#| label: display-upcoming-holidays

holiday_dates_df |>
  dplyr::filter(ObservedDate > CURRENT_DATETIME) |>
  dplyr::mutate(across(where(is.Date), ~ format(.x, "%d-%m-%Y"))) |>
  dplyr::select(HolidayName, ActualDate, ObservedDate, Type, DayOfWeek) |> 
  knitr::kable()
```

[Source](https://www.public-holidays.nz/)
